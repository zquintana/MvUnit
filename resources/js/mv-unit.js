// Generated by CoffeeScript 1.8.0
(function() {
  var $, MvUnit, MvUnitManager, each;

  MvUnit = (function() {

    /**
    	 * Results foot dom ID
    	 * 
    	 * @type string
     */
    var ERROR_NO_MODCODE_SELECTED, FUNCTION_TEST, FUNCTION_TESTS, MODULE_SELECTED_ID, OUTPUT_TEXT_ID, TABLE_RESULTS_BODY_ID, TABLE_RESULTS_FOOT_ID;

    TABLE_RESULTS_FOOT_ID = "mvunit_result_table_foot";


    /**
    	 * Results body dom ID
    	 * 
    	 * @type string
     */

    TABLE_RESULTS_BODY_ID = "mvunit_result_table_results";


    /**
    	 * Module selector dom ID
    	 * 
    	 * @type string
     */

    MODULE_SELECTED_ID = "mv_unit_test_modules";


    /**
    	 * Output textarea selector dom ID
    	 * 
    	 * @type string
     */

    OUTPUT_TEXT_ID = "mvunit_output_text";


    /**
    	 * Miva JSON function to retrieve MvUnit tests
    	 * 
    	 * @type string
     */

    FUNCTION_TESTS = "MvUnit_Tests";


    /**
    	 * Miva JSON function to run MvUnit test
    	 * 
    	 * @type string
     */

    FUNCTION_TEST = "MvUnit_Test";


    /**
    	 * No module selected error message
    	 * 
    	 * @type string
     */

    ERROR_NO_MODCODE_SELECTED = 'Please select a module to attempt to test';


    /**
    	 * Constructor
    	 * 
    	 * @return this
     */

    function MvUnit() {}


    /**
    	 * Outputs error message
    	 * 
    	 * @param  string msg
    	 * @return bool false
     */

    MvUnit.prototype.error = function(msg) {
      alert("Error: " + msg);
      return false;
    };


    /**
    	 * Starts running tests
    	 * 
    	 * @return null
     */

    MvUnit.prototype.runTests = function() {
      var selectedMod;
      selectedMod = this.getModuleOptionSelected();
      if (selectedMod == null) {
        return this.error(ERROR_NO_MODCODE_SELECTED);
      }
      return this.clear().load(selectedMod.value);
    };


    /**
    	 * Getter for module code
    	 * 
    	 * @return string
     */

    MvUnit.prototype.getModuleCode = function() {
      return this.moduleCode;
    };


    /**
    	 * Module code setter
    	 * 
    	 * @param this
     */

    MvUnit.prototype.setModuleCode = function(moduleCode) {
      this.moduleCode = moduleCode;
      return this;
    };


    /**
    	 * Get current time in seconds
    	 * 
    	 * @return int
     */

    MvUnit.prototype.now = function() {
      var d;
      d = new Date();
      return d.getTime();
    };


    /**
    	 * Runs test request
    	 * 
    	 * @param  {[type]}
    	 * @return {[type]}
     */

    MvUnit.prototype.execute = function(test) {
      var me;
      me = this;
      this.startTime = this.now();
      return this.currentReq = AJAX_Call_Module(function(response) {
        return me.handleTestResponse(response);
      }, 'admin', this.getModuleCode(), FUNCTION_TEST, "MvUnit:Test=" + (encodeURIComponent(test)));
    };


    /**
    	 * Get tests for module
    	 * 
    	 * @param  string moduleCode
    	 * @return XMLHttpRequest
     */

    MvUnit.prototype.load = function(moduleCode) {
      var me;
      me = this;
      this.setModuleCode(moduleCode);
      return this.currentReq = AJAX_Call_Module(function(response) {
        return me.handleTestsResponse(response);
      }, 'admin', this.getModuleCode(), FUNCTION_TESTS);
    };


    /**
    	 * Current name of test
    	 * 
    	 * @return string
     */

    MvUnit.prototype.getCurrentName = function() {
      if (this.currentData.name != null) {
        return this.currentData.name;
      } else {
        return this.currentTest;
      }
    };


    /**
    	 * Output the result to the table
    	 * 
    	 * @param  object result
    	 * @return null
     */

    MvUnit.prototype.outputResult = function(result, appendEl, id) {
      var assertCell, failSpan, nameCell, resultCell, row, successSpan, timeCell;
      row = document.createElement('tr');
      if (id != null) {
        row.setAttribute('id', id);
      }
      nameCell = document.createElement('td');
      nameCell.appendChild(document.createTextNode(this.getCurrentName()));
      row.appendChild(nameCell);
      assertCell = document.createElement('td');
      assertCell.appendChild(document.createTextNode(result.assertions));
      row.appendChild(assertCell);
      resultCell = document.createElement('td');
      if (result.failures > 0) {
        failSpan = document.createElement('span');
        failSpan.className = 'mvunit-fails';
        failSpan.appendChild(document.createTextNode(result.failures));
        resultCell.appendChild(failSpan);
      }
      if (result.successes > 0) {
        if (result.failures > 0) {
          resultCell.appendChild(document.createTextNode('/'));
        }
        successSpan = document.createElement('span');
        successSpan.className = 'mvunit-success';
        successSpan.appendChild(document.createTextNode(result.successes));
        resultCell.appendChild(successSpan);
      }
      row.appendChild(resultCell);
      timeCell = document.createElement('td');
      timeCell.appendChild(document.createTextNode("" + result.executionTime + "ms"));
      row.appendChild(timeCell);
      appendEl.appendChild(row);
      return this.outputText(result.output);
    };


    /**
    	 * Render foot content
    	 * 
    	 * @return null
     */

    MvUnit.prototype.renderFoot = function() {
      var labelCell, resultCell, row;
      row = document.createElement('tr');
      labelCell = document.createElement('th');
      labelCell.setAttribute('colspan', 3);
      labelCell.appendChild(document.createTextNode('Result'));
      row.appendChild(labelCell);
      resultCell = document.createElement('th');
      resultCell.appendChild(document.createTextNode(this.totals.failures > 0 ? "Fail" : "Pass"));
      row.appendChild(resultCell);
      return this.getResultsFoot().appendChild(row);
    };


    /**
    	 * Results body getter
    	 * 
    	 * @return object element
     */

    MvUnit.prototype.getResultsBody = function() {
      return $(TABLE_RESULTS_BODY_ID);
    };


    /**
    	 * Results foot getter
    	 * 
    	 * @return object element
     */

    MvUnit.prototype.getResultsFoot = function() {
      return $(TABLE_RESULTS_FOOT_ID);
    };


    /**
    	 * Getter for output textarea
    	 * 
    	 * @return object element
     */

    MvUnit.prototype.getOutputText = function() {
      return $(OUTPUT_TEXT_ID);
    };


    /**
    	 * Output text to output display
    	 * 
    	 * @param  string txt
    	 * @return null
     */

    MvUnit.prototype.outputText = function(txt) {
      if (txt == null) {
        return;
      }
      return this.getOutputText().value += "" + (this.getCurrentName()) + ":\n" + txt + "\n\r";
    };


    /**
    	 * Clear results table
    	 * 
    	 * @return this
     */

    MvUnit.prototype.clear = function() {
      var tbody, tfoot;
      tbody = this.getResultsBody();
      while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
      }
      tfoot = this.getResultsFoot();
      while (tfoot.firstChild) {
        tfoot.removeChild(tfoot.firstChild);
      }
      this.totals = null;
      this.currentData = null;
      this.currentTest = null;
      this.getOutputText().value = "";
      return this;
    };


    /**
    	 * Update totals
    	 * 
    	 * @param  object data
    	 * @return null
     */

    MvUnit.prototype.updateTotals = function(data) {
      if (this.totals == null) {
        this.totals = {
          assertions: 0,
          failures: 0,
          successes: 0,
          executionTime: 0
        };
      }
      this.totals.assertions += data.assertions;
      this.totals.failures += data.failures;
      this.totals.successes += data.successes;
      this.totals.executionTime += data.executionTime;
      return null;
    };


    /**
    	 * Handles execute test request
    	 * 
    	 * @param  object response
    	 * @return null
     */

    MvUnit.prototype.handleTestResponse = function(response) {
      var data;
      if (response.success === 0) {
        return this.handleError(response);
      }
      this.currentData = data = response.data;
      data.executionTime = this.now() - this.startTime;
      this.outputResult(data, this.getResultsBody());
      this.updateTotals(data);
      if (this.hasTests()) {
        this.execute(this.nextTest());
        return;
      }
      this.totals.name = "Totals";
      this.currentData = this.totals;
      this.outputResult(this.totals, this.getResultsFoot(), 'mvunit_result_table_results_total');
      return this.renderFoot();
    };

    MvUnit.prototype.handleError = function(response) {
      return alert("" + response.error_code + ": " + response.error_message);
    };


    /**
    	 * Handles response from load
    	 * 
    	 * @param  object response
    	 * @return null
     */

    MvUnit.prototype.handleTestsResponse = function(response) {
      this.setTests(response.data);
      if (!this.hasTests()) {
        return;
      }
      return this.execute(this.nextTest());
    };


    /**
    	 * Returns next test name from queue
    	 * 
    	 * @return string
     */

    MvUnit.prototype.nextTest = function() {
      if (!this.hasTests()) {
        this.currentTest = null;
        return;
      }
      this.currentTest = this.getTests().shift();
      return this.currentTest;
    };


    /**
    	 * Tests setter
    	 *
    	 * @param array tests
     */

    MvUnit.prototype.setTests = function(tests) {
      this.moduleTests = tests;
      return this;
    };


    /**
    	 * Ensures that tests are available
    	 * 
    	 * @return bool
     */

    MvUnit.prototype.hasTests = function() {
      return (this.moduleTests != null) && this.moduleTests.length > 0;
    };


    /**
    	 * Module tests getter
    	 * 
    	 * @return array
     */

    MvUnit.prototype.getTests = function() {
      return this.moduleTests;
    };


    /**
    	 * Gets the module select DOM Element
    	 * 
    	 * @return DOMElement
     */

    MvUnit.prototype.getModuleSelect = function() {
      return $(MODULE_SELECTED_ID);
    };


    /**
    	 * Gets options from module select element
    	 * 
    	 * @return array DOMElements
     */

    MvUnit.prototype.getModuleOptions = function() {
      return this.getModuleSelect().options;
    };


    /**
    	 * Getter selector option from module select element
    	 * 
    	 * @return DOMElement
     */

    MvUnit.prototype.getModuleOptionSelected = function() {
      var selected;
      selected = null;
      each(this.getModuleOptions(), function(el) {
        if (el.selected === true) {
          return selected = el;
        }
      });
      if (selected && (selected.value != null) && selected.value.length > 0) {
        return selected;
      } else {
        return null;
      }
    };

    return MvUnit;

  })();

  window.MvUnit = MvUnit;

  MvUnitManager = {
    Run_Tests: function(el) {
      return this.sharedInstance().runTests();
    },
    sharedInstance: function() {
      if (this.instance == null) {
        this.instance = new MvUnit;
      }
      return this.instance;
    }
  };

  window.MvUnitManager = MvUnitManager;

  $ = function(el_id) {
    return document.getElementById(el_id);
  };

  each = function(list, cb) {
    var el, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      el = list[_i];
      _results.push(cb.call(this, el));
    }
    return _results;
  };

}).call(this);
